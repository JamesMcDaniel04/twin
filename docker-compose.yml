version: '3.8'

services:
  # ============================================================================
  # Neo4j Graph Database
  # ============================================================================
  neo4j:
    image: neo4j:5.16.0
    container_name: twinops-neo4j
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    environment:
      - NEO4J_AUTH=neo4j/changeme-neo4j-password
      - NEO4J_PLUGINS=["apoc", "graph-data-science"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*,gds.*
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=2G
      - NEO4J_dbms_memory_pagecache_size=512m
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_plugins:/plugins
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "changeme-neo4j-password", "RETURN 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - twinops-network

  # ============================================================================
  # Redis Cache
  # ============================================================================
  redis:
    image: redis:7.2-alpine
    container_name: twinops-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes --requirepass changeme-redis-password
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - twinops-network

  # ============================================================================
  # MongoDB Document Storage
  # ============================================================================
  mongodb:
    image: mongo:7.0
    container_name: twinops-mongodb
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=changeme-mongo-password
      - MONGO_INITDB_DATABASE=twinops
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - twinops-network

  # ============================================================================
  # Elasticsearch Full-Text Search
  # ============================================================================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    container_name: twinops-elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - twinops-network

  # ============================================================================
  # Kafka Message Queue
  # ============================================================================
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: twinops-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    networks:
      - twinops-network

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    container_name: twinops-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    volumes:
      - kafka_data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - twinops-network

  # ============================================================================
  # Temporal Workflow Engine
  # ============================================================================
  temporal:
    image: temporalio/auto-setup:1.22.0
    container_name: twinops-temporal
    depends_on:
      - postgresql
    ports:
      - "7233:7233"  # gRPC
      - "8233:8233"  # UI
    environment:
      - DB=postgresql
      - DB_PORT=5432
      - POSTGRES_USER=temporal
      - POSTGRES_PWD=temporal
      - POSTGRES_SEEDS=postgresql
    volumes:
      - temporal_data:/etc/temporal
    healthcheck:
      test: ["CMD", "tctl", "cluster", "health"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - twinops-network

  postgresql:
    image: postgres:15-alpine
    container_name: twinops-postgresql
    environment:
      POSTGRES_USER: temporal
      POSTGRES_PASSWORD: temporal
      POSTGRES_DB: temporal
    volumes:
      - postgresql_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U temporal"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - twinops-network

  # ============================================================================
  # Monitoring Stack
  # ============================================================================
  prometheus:
    image: prom/prometheus:v2.48.0
    container_name: twinops-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
    volumes:
      - ./infrastructure/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - twinops-network

  grafana:
    image: grafana/grafana:10.2.2
    container_name: twinops-grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - twinops-network

  jaeger:
    image: jaegertracing/all-in-one:1.52
    container_name: twinops-jaeger
    ports:
      - "5775:5775/udp"
      - "6831:6831/udp"
      - "6832:6832/udp"
      - "5778:5778"
      - "16686:16686"  # UI
      - "14250:14250"  # gRPC
      - "14268:14268"
      - "14269:14269"
      - "9411:9411"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - twinops-network

  # ============================================================================
  # TwinOps Backend Application
  # ============================================================================
  backend:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.backend
    container_name: twinops-backend
    depends_on:
      neo4j:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      kafka:
        condition: service_healthy
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=changeme-neo4j-password
      - REDIS_URL=redis://:changeme-redis-password@redis:6379/0
      - MONGODB_URL=mongodb://admin:changeme-mongo-password@mongodb:27017/twinops?authSource=admin
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - TEMPORAL_HOST=temporal:7233
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    env_file:
      - .env
    volumes:
      - ./backend:/app/backend:ro
      - backend_logs:/app/logs
    command: uvicorn backend.api.main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/admin/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - twinops-network

  # ============================================================================
  # Temporal Worker
  # ============================================================================
  temporal-worker:
    build:
      context: .
      dockerfile: infrastructure/docker/Dockerfile.backend
    container_name: twinops-temporal-worker
    depends_on:
      - temporal
      - backend
    environment:
      - ENVIRONMENT=development
      - TEMPORAL_HOST=temporal:7233
    env_file:
      - .env
    volumes:
      - ./backend:/app/backend:ro
    command: python backend/workflows/worker.py
    networks:
      - twinops-network

# ============================================================================
# Volumes
# ============================================================================
volumes:
  neo4j_data:
  neo4j_logs:
  neo4j_plugins:
  redis_data:
  mongodb_data:
  mongodb_config:
  elasticsearch_data:
  zookeeper_data:
  zookeeper_logs:
  kafka_data:
  temporal_data:
  postgresql_data:
  prometheus_data:
  grafana_data:
  backend_logs:

# ============================================================================
# Networks
# ============================================================================
networks:
  twinops-network:
    driver: bridge
